/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Peliculas = {
  _id: string;
  _type: "peliculas";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "categoria";
  }>;
  generos?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "genero";
  }>;
  fechaEstreno?: string;
  yearEstreno?: string;
  estudio?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  duracion?: string;
  peso?: string;
  resolucion?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  videoEmbed?: string;
  bannerPeli?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "temporada" | "popular";
};

export type Animes = {
  _id: string;
  _type: "animes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageBanner?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "categoria";
  }>;
  generos?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "genero";
  }>;
  fechaEstreno?: string;
  yearEstreno?: string;
  estacion?: "Verano" | "Oto\xF1o" | "Invierno" | "Primavera";
  capActual?: number;
  capTotal?: number;
  estudio?: string;
  estado?: "En Emision" | "Pendiente" | "Finalizado" | "Dropeado";
  peso?: string;
  resolucion?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  capLinks?: Array<string>;
  capImagenes?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "temporada" | "popular";
};

export type Genero = {
  _id: string;
  _type: "genero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  descripcion?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Categoria = {
  _id: string;
  _type: "categoria";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  descripcion?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Peliculas | Animes | Genero | Categoria | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/query.ts
// Variable: TEMPORADA_ANIMES
// Query: *[_type == 'animes' && estadoPublic == 'temporada'] | order(dateTime(publishedAt) desc){    ...,    "generos": generos[]->title ,     "categorias": categorias[]->title,  }
export type TEMPORADA_ANIMESResult = Array<{
  _id: string;
  _type: "animes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageBanner?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estacion?: "Invierno" | "Oto\xF1o" | "Primavera" | "Verano";
  capActual?: number;
  capTotal?: number;
  estudio?: string;
  estado?: "Dropeado" | "En Emision" | "Finalizado" | "Pendiente";
  peso?: string;
  resolucion?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  capLinks?: Array<string>;
  capImagenes?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
}>;
// Variable: ALLANIMES_QUERY
// Query: *[_type=='animes'] | order(titulo asc){    ...,"generos": generos[]->title, "categorias": categorias[]->title,  }
export type ALLANIMES_QUERYResult = Array<{
  _id: string;
  _type: "animes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageBanner?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estacion?: "Invierno" | "Oto\xF1o" | "Primavera" | "Verano";
  capActual?: number;
  capTotal?: number;
  estudio?: string;
  estado?: "Dropeado" | "En Emision" | "Finalizado" | "Pendiente";
  peso?: string;
  resolucion?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  capLinks?: Array<string>;
  capImagenes?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
}>;
// Variable: ALLPELICULAS_QUERY
// Query: *[_type=='peliculas'] | order(titulo asc){    ...,"generos": generos[]->title, "categorias": categorias[]->title,  }
export type ALLPELICULAS_QUERYResult = Array<{
  _id: string;
  _type: "peliculas";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estudio?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  duracion?: string;
  peso?: string;
  resolucion?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  videoEmbed?: string;
  bannerPeli?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
}>;
// Variable: ANIME_BY_SLUG_QUERY
// Query: *[_type == "animes" && slug.current == $slug] | order(titulo asc) [0]{    ...,"generos": generos[]->title, "categorias": categorias[]->title,    "recoAnime1": recoAnime1[]->{titulo, slug, imagePoster},   }
export type ANIME_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "animes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageBanner?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estacion?: "Invierno" | "Oto\xF1o" | "Primavera" | "Verano";
  capActual?: number;
  capTotal?: number;
  estudio?: string;
  estado?: "Dropeado" | "En Emision" | "Finalizado" | "Pendiente";
  peso?: string;
  resolucion?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  capLinks?: Array<string>;
  capImagenes?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recoAnime1: Array<{
    titulo: string | null;
    slug: Slug | null;
    imagePoster: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
} | null;
// Variable: PELI_BY_SLUG_QUERY
// Query: *[_type == "peliculas" && slug.current == $slug] | order(titulo asc) [0]{    ...,"generos": generos[]->title, "categorias": categorias[]->title,    "recoAnime1": recoAnime1[]->{titulo, slug, imagePoster},   }
export type PELI_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "peliculas";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estudio?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  duracion?: string;
  peso?: string;
  resolucion?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  videoEmbed?: string;
  bannerPeli?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  recoAnime1: Array<{
    titulo: string | null;
    slug: Slug | null;
    imagePoster: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
} | null;
// Variable: RECO_ANIMES
// Query: *[ _type == "animes"] {  ...,  animereco[]-> {     titulo,    slug,    imagePoster   }}
export type RECO_ANIMESResult = Array<{
  _id: string;
  _type: "animes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  imageBanner?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "categoria";
  }>;
  generos?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "genero";
  }>;
  fechaEstreno?: string;
  yearEstreno?: string;
  estacion?: "Invierno" | "Oto\xF1o" | "Primavera" | "Verano";
  capActual?: number;
  capTotal?: number;
  estudio?: string;
  estado?: "Dropeado" | "En Emision" | "Finalizado" | "Pendiente";
  peso?: string;
  resolucion?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  capLinks?: Array<string>;
  capImagenes?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
  animereco: null;
}>;
// Variable: TEMPORADA_PELIS
// Query: *[_type == 'peliculas' && estadoPublic == 'temporada'] | order(dateTime(publishedAt) desc){    ...,    "generos": generos[]->title ,     "categorias": categorias[]->title,  }
export type TEMPORADA_PELISResult = Array<{
  _id: string;
  _type: "peliculas";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titulo?: string;
  slug?: Slug;
  sinopsis?: string;
  imagePoster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categorias: Array<string | null> | null;
  generos: Array<string | null> | null;
  fechaEstreno?: string;
  yearEstreno?: string;
  estudio?: string;
  precuela?: string;
  linkPrecuela?: string;
  secuela?: string;
  linkSecuela?: string;
  duracion?: string;
  peso?: string;
  resolucion?: string;
  estrellas?: string;
  myanimelist?: string;
  descarga1?: Array<string>;
  descarga2?: Array<string>;
  servidor1?: string;
  servidor2?: string;
  videoEmbed?: string;
  bannerPeli?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  recoAnime1?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "animes";
  }>;
  publishedAt?: string;
  estadoPublic?: "normal" | "popular" | "temporada";
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == 'animes' && estadoPublic == 'temporada'] | order(dateTime(publishedAt) desc){\n    ...,\n    \"generos\": generos[]->title , \n    \"categorias\": categorias[]->title,\n  }\n  ": TEMPORADA_ANIMESResult;
    "\n  *[_type=='animes'] | order(titulo asc){\n    ...,\"generos\": generos[]->title, \"categorias\": categorias[]->title,\n  }\n  ": ALLANIMES_QUERYResult;
    "\n  *[_type=='peliculas'] | order(titulo asc){\n    ...,\"generos\": generos[]->title, \"categorias\": categorias[]->title,\n  }\n  ": ALLPELICULAS_QUERYResult;
    "*[_type == \"animes\" && slug.current == $slug] | order(titulo asc) [0]{\n    ...,\"generos\": generos[]->title, \"categorias\": categorias[]->title,\n    \"recoAnime1\": recoAnime1[]->{titulo, slug, imagePoster}, \n  }": ANIME_BY_SLUG_QUERYResult;
    "*[_type == \"peliculas\" && slug.current == $slug] | order(titulo asc) [0]{\n    ...,\"generos\": generos[]->title, \"categorias\": categorias[]->title,\n    \"recoAnime1\": recoAnime1[]->{titulo, slug, imagePoster}, \n  }": PELI_BY_SLUG_QUERYResult;
    "*[ _type == \"animes\"] {\n  ...,\n  animereco[]-> { \n    titulo,\n    slug,\n    imagePoster \n  }\n}\n": RECO_ANIMESResult;
    "\n  *[_type == 'peliculas' && estadoPublic == 'temporada'] | order(dateTime(publishedAt) desc){\n    ...,\n    \"generos\": generos[]->title , \n    \"categorias\": categorias[]->title,\n  }\n  ": TEMPORADA_PELISResult;
  }
}
